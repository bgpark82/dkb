apiVersion: apps/v1 # 이 YAML 파일이 어떤 Kubernetes API 버전을 사용하는지 정의합니다. 'apps/v1'은 Deployment 리소스에 일반적으로 사용됩니다.
kind: Deployment     # 이 리소스의 종류가 'Deployment'임을 나타냅니다. Deployment는 Pod의 집합을 관리하고 업데이트를 처리합니다.
metadata:            # 이 Deployment 리소스에 대한 메타데이터 (정보)를 정의합니다.
  name: service-sepa-credit-transfer-api # 이 Deployment의 이름입니다. 클러스터 내에서 고유해야 합니다.
  labels:            # 이 Deployment에 레이블(꼬리표)을 부여합니다. 나중에 검색하거나 다른 리소스와 연결하는 데 사용됩니다. (# 기계 자체의 꼬리표)
    app: service-sepa-credit-transfer-api    # 'app'이라는 키에 'service-sepa-credit-transfer-api'이라는 값을 가진 레이블입니다.
spec:                # 이 Deployment의 원하는 상태(specification)를 정의합니다.
  replicas: 1        # 이 애플리케이션의 Pod를 몇 개 실행할지 지정합니다. 여기서는 2개의 Pod 인스턴스를 유지합니다.
  selector:          # Deployment가 어떤 Pod들을 관리할지 선택하는 기준을 정의합니다.
    matchLabels:     # 이 레이블과 일치하는 Pod들을 선택합니다. (# 이 꼬리표를 가진 인형들만 뽑기 기계가 관리할 거야!)
      app: service-sepa-credit-transfer-api  # 'app: service-sepa-credit-transfer-api' 레이블을 가진 Pod들을 관리합니다.
  template:          # 이 Deployment가 생성할 Pod의 템플릿(청사진)을 정의합니다.
    metadata:        # Pod 템플릿의 메타데이터입니다.
      labels:        # 이 Pod 템플릿에서 생성될 Pod들에 부여될 레이블입니다. (# 새로 만들 인형에 붙일 꼬리표 (selector와 똑같아야 함!)
        app: service-sepa-credit-transfer-api # 'selector'의 'matchLabels'와 반드시 일치해야 합니다. Deployment가 이 레이블을 가진 Pod만 관리하도록 합니다.
    spec:            # Pod의 스펙(내용)을 정의합니다.
      containers:    # 이 Pod 내에서 실행될 컨테이너들의 목록입니다.
        - name: service-sepa-credit-transfer-api-container # 이 컨테이너의 이름입니다. Pod 내에서 고유해야 합니다.
          image: bgpark82/sepa-credit-transfer-api:1.0 # 이 컨테이너가 사용할 Docker 이미지의 이름과 태그입니다. 위에서 빌드하고 푸시한 이미지입니다.
          imagePullPolicy: Always
          ports:       # 이 컨테이너가 노출할 네트워크 포트 목록입니다.
            - containerPort: 8080 # 컨테이너 내부에서 애플리케이션이 사용하는 포트입니다 (Spring Boot의 기본 포트).
#          env:         # 컨테이너에 전달될 환경 변수 목록입니다 (선택 사항).
#            - name: SPRING_PROFILES_ACTIVE # 환경 변수 이름입니다.
#              value: prod # 환경 변수 값입니다. Spring Boot 애플리케이션이 'prod' 프로파일로 시작하도록 합니다.
#          resources:   # 이 컨테이너에 할당할 CPU 및 메모리 리소스 요구 사항 및 제한을 정의합니다 (선택 사항이지만 권장).
#            requests:  # 이 컨테이너가 최소한으로 요구하는 리소스 양입니다.
#              memory: "512Mi" # 512 메비바이트 메모리를 요구합니다.
#              cpu: "500m"     # 500 밀리코어 CPU (0.5 CPU 코어)를 요구합니다.
#            limits:    # 이 컨테이너가 최대로 사용할 수 있는 리소스 양입니다. 이를 초과하면 컨테이너가 종료될 수 있습니다.
#              memory: "1Gi"   # 1 기비바이트 메모리까지 사용할 수 있습니다.
#              cpu: "1000m"    # 1000 밀리코어 CPU (1 CPU 코어)까지 사용할 수 있습니다.
#          readinessProbe: # 컨테이너가 요청을 처리할 준비가 되었는지 Kubernetes가 확인할 방법입니다. Pod가 "Ready" 상태가 되기 위해 통과해야 합니다.
#            httpGet:   # HTTP GET 요청을 사용하여 상태를 확인합니다.
#              path: /actuator/health/readiness # HTTP 요청을 보낼 경로입니다 (Spring Boot Actuator의 readiness 엔드포인트).
#              port: 8080 # 요청을 보낼 컨테이너 포트입니다.
#            initialDelaySeconds: 10 # 컨테이너 시작 후 첫 번째 프로브를 시작하기 전까지 대기하는 시간입니다 (초).
#            periodSeconds: 5 # 프로브를 얼마나 자주 실행할지 (초).
#            timeoutSeconds: 3 # 프로브 요청이 타임아웃되기까지 기다리는 시간 (초).
#            failureThreshold: 3 # 성공으로 간주하기 위해 몇 번의 실패까지 허용할지. 이 횟수를 초과하면 Pod는 Unready 상태가 됩니다.
#          livenessProbe: # 컨테이너가 살아있는지 (실행 중인지) Kubernetes가 확인할 방법입니다. 실패하면 Kubernetes가 컨테이너를 재시작합니다.
#            httpGet:   # HTTP GET 요청을 사용하여 상태를 확인합니다.
#              path: /actuator/health/liveness # HTTP 요청을 보낼 경로입니다 (Spring Boot Actuator의 liveness 엔드포인트).
#              port: 8080 # 요청을 보낼 컨테이너 포트입니다.
#            initialDelaySeconds: 20 # 컨테이너 시작 후 첫 번째 프로브를 시작하기 전까지 대기하는 시간입니다 (초).
#            periodSeconds: 10 # 프로브를 얼마나 자주 실행할지 (초).
#            timeoutSeconds: 3 # 프로브 요청이 타임아웃되기까지 기다리는 시간 (초).
#            failureThreshold: 3 # 실패로 간주하기 위해 몇 번의 실패까지 허용할지. 이 횟수를 초과하면 컨테이너가 재시작됩니다.


---
apiVersion: v1     # Service 리소스의 API 버전
kind: Service      # 두 번째 리소스: Service 정의 시작
metadata:          # 이 Service의 정보
  name: service-sepa-credit-transfer-api-service # Service 이름
  labels:          # Service에 붙일 꼬리표
    app: service-sepa-credit-transfer-api  # 'app: your-app' 꼬리표
spec:              # Service의 원하는 상태 정의
  selector:        # Service가 트래픽을 보낼 Pod들을 선택하는 기준
    app: service-sepa-credit-transfer-api  # 'app: your-app' 꼬리표를 가진 Pod들에게 트래픽 전달 (Deployment의 Pod 꼬리표와 일치해야 함)
  ports:           # Service가 노출할 포트 목록
    - protocol: TCP  # 네트워크 프로토콜 (TCP 또는 UDP)
      port: 8080       # Service가 외부에 노출할 포트 (사용자가 접근할 포트)
      targetPort: 8080 # Service가 Pod 내부 컨테이너로 트래픽을 전달할 포트 (Spring Boot 앱의 포트와 일치)
  type: LoadBalancer  # Service 유형 (가장 기본적인 내부 접근 유형, minikube tunneling 사용에 필요)